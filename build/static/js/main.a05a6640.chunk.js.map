{"version":3,"sources":["interfaces/quizes.ts","interfaces/index.ts","redux/actions/types.ts","components/UI/Hamburger.tsx","components/UI/Sidebar.tsx","components/UI/Backdrop.tsx","components/Header.tsx","firebase.ts","helpFunctions/filter.ts","helpFunctions/isEmptyObject.ts","helpFunctions/timerFormatter.ts","components/UI/Modal.tsx","redux/actions/quizes.ts","components/UI/Loader.tsx","components/QuizCard.tsx","helpFunctions/dateFormatter.ts","helpFunctions/getMonthName.ts","components/Finder.tsx","pages/Profile.tsx","components/creator/CreatorMainInfo.tsx","components/creator/CreatorAnswer.tsx","validate/question.ts","components/creator/CreatorQuestions.tsx","pages/QuizCreator.tsx","validate/quiz.ts","components/OrderOpt.tsx","components/UI/Switcher.tsx","components/OrderOptions.tsx","pages/QuizListing.tsx","helpFunctions/sort.ts","components/activeQuiz/QuizQuestion.tsx","components/activeQuiz/QuizTimer.tsx","components/activeQuiz/QuizQuestions.tsx","components/activeQuiz/QuizFinished.tsx","pages/ActiveQuiz.tsx","pages/Login.tsx","redux/actions/users.ts","pages/Logout.tsx","components/Routes.tsx","App.tsx","serviceWorker.ts","redux/reducers/users.ts","redux/reducers/quizes.ts","redux/reducers/index.ts","redux/reduxStore.ts","index.tsx"],"names":["RightAnswer","Complexity","OrderType","OrderDirection","ActionTypes","Hamburger","show","setVisible","props","useSpring","transform","color","config","stiff","to","top","center","bottom","div","style","className","onClick","svg","width","height","fill","viewBox","xmlns","rect","rx","Sidebar","users","useSelector","state","sidebarRef","useRef","transition","useTransition","from","enter","leave","unique","ref","links","link","title","logged","itemsRef","trail","item","opacity","useChain","map","key","exact","Backdrop","display","Header","useState","sidebar","setSidebar","document","body","overflowY","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","filter","compareValue","collection","quiz","substring","length","toLowerCase","isEmptyObject","obj","hasOwnProperty","timerFormatter","timer","formattedMinutes","Date","getMinutes","formattedSeconds","getSeconds","Modal","messages","dispatch","useDispatch","currentKey","showMessage","showError","message","error","type","hideModal","Loader","id","cx","cy","r","points","x","y","QuizCard","description","complexity","author","timeCreated","bestResult","questionCount","editable","history","useHistory","easy","medium","hard","setComplexity","time","hours","getHours","minutes","seconds","day","getDate","getMonth","getFullYear","dateFormatter","quizId","a","database","set","then","showModal","payload","catch","e","push","Finder","finder","setFinder","aria-label","aria-describedby","value","onChange","target","Profile","quizesListing","loading","useEffect","CreatorMainInfo","newQuiz","setNewQuizState","setProgress","errors","role","rows","CreatorAnswer","index","activeIndex","onChangeInput","onChangeRightAnswer","name","validateQuestion","inputs","limit","limitReached","question","answers","every","answer","textInputs","rightAnswer","one","CreatorQuestions","listing","two","wasAdded","activeQuestion","questions","setQuestions","readyQuestions","pop","loadQuestionToMainState","inputName","tempListing","indexOfAnswer","onCheckQuestionHandler","emptyQuestion","undefined","errorIndex","onCheckQuestionByIndex","toString","splice","deleteEmpty","onDeleteQuestion","onDeleteAllQuestions","Object","values","renderErrors","QuizCreator","checkQuizValidation","forEach","validateMain","readyQuiz","Math","random","getTime","goBack","OrderOpt","valueToShow","orderType","onChangeHandler","checked","Switcher","optionsLabel","onSwitchHandler","OrderOptions","order","setOrder","dataCreated","direction","asc","desc","keys","opt","QuizListing","tempQuizesList","sorted","sort","leftHand","rightHand","reverse","collectionWithNumbers","readyCollection","quizItem","renderQuizes","QuizQuestion","userAnswersState","setActiveQuestion","setUserAnswerState","questionBlock","lastQuestion","answersListing","onAnswerClickHandler","emptyIndexes","i","renderEmptyQuestions","QuizTimer","setTimer","timeHandler","setTimeout","clearTimeout","QuizQuestions","questionBlocks","transitions","noAnswerQuestion","find","renderQuestionIndexes","QuizFinished","func","activeQuiz","willMount","wrongAnswers","results","wasRight","result","renderCheckAnswers","current","updateResult","child","ActiveQuizPage","params","useParams","isFinished","setFinished","showLoader","once","snapshot","data","val","getActiveQuiz","parseInt","hideLoader","errorObject","emptyAnswers","onFinishHandle","Login","email","password","user","setUser","showLoaderUser","auth","signInWithEmailAndPassword","loginSuccess","hideLoaderUser","loginError","Logout","logout","Routes","quizes","location","useContext","__RouterContext","pathname","path","render","quizesList","App","on","parsedData","fetchQuizes","modal","Boolean","window","hostname","match","initialState","reducers","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","StrictMode","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a05a6640.chunk.js","sourcesContent":["import {ValidateErrorQuestion, ValidateErrorsMain} from \"../validate\";\n\nexport enum RightAnswer {\n    one, two, three, four\n}\n\nexport enum Complexity {\n    easy = 'easy',\n    medium = 'medium',\n    hard = 'hard'\n}\n\nexport enum OrderType {\n    dataCreated = 'Data created',\n    questions = 'Questions',\n    complexity = 'Complexity'\n}\n\nexport enum OrderDirection {\n    asc,\n    desc\n}\n\nexport interface OrderFull {\n    type: OrderType,\n    direction: OrderDirection\n}\n\nexport type Answers = [string, string, string, string];\n\nexport interface QuestionBlock {\n    question: string,\n    answers: Answers,\n    rightAnswer: RightAnswer | undefined;\n}\n\nexport interface QuizRouterParams {\n    id?: string | undefined\n}\n\nexport interface Quiz {\n    id: string,\n    title: string,\n    description: string,\n    complexity: Complexity,\n    questionCount: number,\n    author: string, // USER\n    timeCreated: Date, // time created\n    bestResult: number\n}\n\nexport interface ActiveQuiz extends Quiz{\n    questions: QuestionBlock[]\n}\n\nexport interface NewQuiz {\n    title: string,\n    description: string,\n    complexity: Complexity,\n    questions: QuestionBlock[]\n    questionCount: number,\n    errors?: ValidateErrorsMain\n}\n\nexport interface NewQuestionBlock extends QuestionBlock{\n    wasAdded: boolean\n}\n\nexport interface NewQuestionBlocks {\n    listing: NewQuestionBlock[],\n    activeQuestion: number,\n    limit: number,\n    errors?: ValidateErrorQuestion\n}\n\nexport interface QuizesState {\n    loading: boolean,\n    modal: {\n        message?: string,\n        error?: string\n    }\n    quizesList: Quiz[],\n    activeQuiz: ActiveQuiz | null\n}\n","import {QuizesState} from \"./quizes\";\nimport { UserState } from \"./user\";\n\nexport * from './user';\nexport * from './quizes'\n\nexport interface SummaryState {\n    quizes: QuizesState,\n    users: UserState\n}","import { ShowLoaderUserAction, HideLoaderUserAction, LoginSuccessAction, LoginErrorAction, LogoutAction } from './users';\nimport {\n    FetchQuizesAction,\n    GetActiveQuizAction,\n    HideLoaderAction,\n    HideModalAction,\n    ShowLoaderAction,\n    ShowModalAction\n} from \"./quizes\";\n\nexport enum ActionTypes {\n    showLoader = \"SHOW_LOADER\",\n    hideLoader = \"HIDE_LOADER\",\n\n    hideModal = 'HIDE_MODAL',\n    showModal = 'SHOW_MODAL',\n\n    fetchQuizes = \"FETCH_ALL_QUIZES\",\n    getActiveQuiz = \"GET_ACTION_QUIZ\",\n\n    showLoaderUser = \"SHOW_LOADER_USER\",\n    hideLoaderUser = \"HIDE_LOADER_USER\",\n\n    loginSuccess = \"LOGIN_SUCCESS\",\n    loginError = \"LOGIN_ERROR\",\n\n    logout = \"LOGOUT\"\n}\n\nexport type Action = FetchQuizesAction\n    | GetActiveQuizAction\n    | ShowLoaderAction\n    | HideLoaderAction\n    | HideModalAction\n    | ShowModalAction\n    | ShowLoaderUserAction\n    | HideLoaderUserAction\n    | LoginSuccessAction\n    | LoginErrorAction\n    | LogoutAction;","\nimport React from 'react'\nimport {animated, config, useSpring} from \"react-spring\";\n\ninterface HamburgerProps {\n    show: boolean,\n    setVisible(show: boolean): void\n}\n\ninterface TransformationConfig {\n    top: string,\n    center: string,\n    bottom: string\n}\n\nexport const Hamburger = ({show, setVisible}: HamburgerProps) => {\n    const props = useSpring({\n        transform: show ? 'rotate(0)' : 'rotate(360deg)',\n        color: show ? '#FF00DE' : '#FF00DE'\n        //@ts-ignore\n    }, config.stiff);\n\n    const openedTransformationConfig: TransformationConfig = {\n        top: 'translate(2, 7) rotate(0)',\n        center: 'translate(2, 19) rotate(0)',\n        bottom: 'translate(2, 31) rotate(0)',\n    };\n\n    const closedTransformationConfig: TransformationConfig = {\n        top: 'translate(5, 32) rotate(-45)',\n        center: 'translate(10, 4) rotate(45)',\n        bottom: 'translate(5, 32) rotate(-45)',\n    };\n\n    // @ts-ignore\n    const { top, center, bottom } = useSpring({\n        to: show ? closedTransformationConfig : openedTransformationConfig,\n        config: config.stiff,\n    });\n\n    return(\n        <animated.div style = {props} className='hamburger' onClick={() => setVisible(!show)}>\n            <animated.svg width=\"44\" height=\"44\" fill={props.color} viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\">\n                <animated.rect width=\"40\" height=\"6\" rx=\"3\" transform={top}/>\n                <animated.rect width=\"40\" height=\"6\" rx=\"3\" transform={center} />\n                <animated.rect width=\"40\" height=\"6\" rx=\"3\" transform={bottom} />\n            </animated.svg>\n        </animated.div>\n    )\n};","\nimport React, {useRef} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport { useTransition, useChain, animated, config } from \"react-spring\";\nimport {useSelector} from 'react-redux';\nimport { SummaryState, UserState } from '../../interfaces';\n\ninterface SidebarProps {\n    show: boolean,\n    setVisible(show: boolean): void\n}\n\ninterface Link {\n    link: string,\n    title: string\n}\n\nexport const Sidebar = ({show, setVisible}: SidebarProps) => {\n\n    const users: UserState = useSelector((state: SummaryState) => state.users);\n\n    const sidebarRef = useRef(null);\n    const transition = useTransition(show, null, {\n        from: {\n            transform: \"translateX(-100%)\"\n        },\n        enter: {\n            transform: \"translateX(0)\"\n        },\n        leave: {\n            transform: \"translateY(-100%)\"\n        },\n        unique: true,\n        config: config.stiff,\n        ref: sidebarRef\n    });\n\n\n\n    let links: Link[] = [\n        {\n            link: '/',\n            title: 'Home'\n        },\n        {\n            link: '/login',\n            title: 'Login'\n        }\n    ];\n\n    if(users.logged) {\n        links = [\n            {\n                link: '/',\n                title: 'Home'\n            },\n            {\n                link: '/profile',\n                title: 'Profile'\n            },\n            {\n                link: '/logout',\n                title: 'Logout'\n            }\n        ];\n    }\n\n    const itemsRef = useRef(null);\n    const trail = useTransition(show ? links : [], item => item.link, {\n        from: {\n            opacity: 0,\n            transform: \"translateX(-50px)\"\n        },\n        enter: {\n            opacity: 1,\n            transform: \"translateX(0)\"\n        },\n        leave: {\n            opacity: 0,\n            transform: \"translateX(-25px)\"\n        },\n        ref: itemsRef,\n        config: config.stiff,\n        trail: 100,\n        unique: true\n    });\n\n    useChain(\n        show ? [sidebarRef, itemsRef] : [itemsRef, sidebarRef],\n        show ? [0, 0.25] : [0, 0.6]\n    );\n\n    return (\n        <>\n            {\n                transition.map(({item, key, props}) =>\n                    item ? (\n                        <animated.div key={key} style={props} className=\"sidebar\">\n                            {trail.map(({ item, key, props }) => (\n                                <animated.div key={key} style={props}>\n                                    <NavLink\n                                        exact\n                                        to={item.link}\n                                        className=\"nav-link-button neon-hover\"\n                                        onClick={() => setVisible(false)}\n                                    >{item.title}</NavLink>\n                                </animated.div>\n                            ))}\n                        </animated.div>\n                    ) : null\n                )\n            }\n        </>\n    )\n};","import React from 'react';\nimport {animated, config, useSpring} from \"react-spring\";\n\ninterface BackdropProps {\n    show: boolean,\n    setVisible(show: boolean): void\n}\n\nexport const Backdrop = ({show, setVisible}: BackdropProps) => {\n\n    const props = useSpring({\n        to: show ? {opacity: 1, display: 'block'} : {opacity: 0, display: 'none'},\n        config: config.stiff\n    })\n\n    return(\n        <animated.div\n            style={props}\n            className=\"backdrop-container\"\n            onClick={() => setVisible(false)}\n        >\n        </animated.div>\n    )\n}","import React, {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {Hamburger} from \"./UI/Hamburger\";\nimport {Sidebar} from \"./UI/Sidebar\";\nimport {Backdrop} from \"./UI/Backdrop\";\n\nexport const Header = () => {\n\n    const [sidebar, setSidebar] = useState<boolean>(false);\n\n    if(sidebar) {\n        document.body.style.overflowY = 'hidden';\n    } else {\n        document.body.style.overflowY = 'scroll';\n    }\n\n    return(\n        <>\n            <header>\n                <div className=\"navbar navbar-expand-lg navbar-light\">\n                    <div className=\"navbar-brand\">\n                        <Link to='/'>\n                            Quizer\n                        </Link>\n                    </div>\n                    <Hamburger show={sidebar} setVisible={setSidebar} />\n                </div>\n            </header>\n            <Sidebar show={sidebar} setVisible={setSidebar}/>\n            <Backdrop show={sidebar} setVisible={setSidebar}/>\n        </>\n    )\n};","import * as firebase from \"firebase\";\n\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDffYxl01lLTR4OAHOoiEXYP0mX0lMwJNE\",\n    authDomain: \"quizer-5bb95.firebaseapp.com\",\n    databaseURL: \"https://quizer-5bb95.firebaseio.com\",\n    projectId: \"quizer-5bb95\",\n    storageBucket: \"quizer-5bb95.appspot.com\",\n    messagingSenderId: \"154892451896\",\n    appId: \"1:154892451896:web:11117ba893f8a89f03a6cd\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","\nimport {Quiz} from \"../interfaces\";\n\nexport function filter(compareValue: string, collection: Quiz[]) {\n    return collection.filter((quiz: Quiz): Quiz | null => {\n        if ((compareValue.substring(0, compareValue.length).toLowerCase() === quiz.title.substring(0, compareValue.length).toLowerCase())) {\n            return quiz\n        } else {\n            return null\n        }\n    });\n}","\n\nexport function isEmptyObject(obj: Object) {\n    for( let key in obj )  {\n        if(obj.hasOwnProperty(key)){\n            return false;\n        }\n    }\n    return true;\n}","\nexport function timerFormatter(timer: number): string {\n    let formattedMinutes = new Date(timer).getMinutes();\n    let formattedSeconds = new Date(timer).getSeconds();\n    return `${formattedMinutes < 10 ? '0' + formattedMinutes : formattedMinutes}:${formattedSeconds < 10 ? '0' + formattedSeconds : formattedSeconds}`\n}","import React from \"react\";\nimport {animated, config, useSpring} from \"react-spring\";\nimport {useDispatch} from 'react-redux';\nimport {hideModal} from \"../../redux/actions\";\nimport {isEmptyObject} from \"../../helpFunctions\";\n\ninterface ModalProps {\n    messages: {\n        [key: string]: {message?: string, error?: string}\n    }\n}\n\nexport const Modal = ({messages}: ModalProps) => {\n    const dispatch = useDispatch();\n    let currentKey = '';\n    let showMessage: string | undefined = '';\n    let showError: string | undefined = '';\n\n    for ( let key in messages ) {\n        if(!isEmptyObject(messages[key])){\n            currentKey = key;\n            if(messages[key].message) {\n                showMessage = messages[key].message;\n            }\n            if(messages[key].error) {\n                showError = messages[key].error;\n            }\n            break\n        }\n    }\n\n    const props = useSpring({\n        to: !isEmptyObject(messages[currentKey])\n            ? {opacity: 1, display: 'flex'}\n            : {opacity: 0, display: 'none'},\n        config: config.stiff\n    })\n\n    return (\n        <animated.div\n            style={props}\n            className=\"modal-container\"\n            onClick={() => dispatch(hideModal())}\n        >\n           <div\n               className=\"modal-window\"\n           >\n               {\n                   !showError\n                       ?\n                       <>\n                           <span className=\"modal-title neon-text-big\">\n                                {showMessage}\n                            </span>\n                           <button className=\"btn btn-outline-secondary btn-very-big neon-hover\">Got it</button>\n                       </>\n                       :\n                       <>\n                           <span className=\"modal-title neon-text-big\">\n                               Error!\n                           </span>\n                           <span className=\"modal-title neon-text-big\">\n                                {showError}\n                            </span>\n                           <button className=\"btn btn-outline-danger btn-very-big neon-hover-red\">Got it</button>\n                       </>\n               }\n\n           </div>\n        </animated.div>\n    )\n\n}\n\n","\nimport {Dispatch} from \"redux\";\nimport {ActionTypes} from \"./types\";\nimport {ActiveQuiz, Quiz} from \"../../interfaces\";\nimport firebase from \"../../firebase\";\nimport {FirebaseError} from 'firebase';\n\nexport interface ShowLoaderAction {\n    type: ActionTypes.showLoader\n}\n\nexport interface HideLoaderAction {\n    type: ActionTypes.hideLoader\n}\n\nexport interface FetchQuizesAction {\n    type: ActionTypes.fetchQuizes,\n    payload: Quiz[]\n}\n\nexport interface GetActiveQuizAction {\n    type: ActionTypes.getActiveQuiz,\n    payload: ActiveQuiz\n}\n\nexport interface ShowModalAction {\n    type: ActionTypes.showModal,\n    payload: {[key: string]: string}\n}\n\nexport interface HideModalAction {\n    type: ActionTypes.hideModal\n}\n\nexport const showModal = (isError: boolean, msg: string) => {\n    return (dispatch: Dispatch) => {\n        if(isError) {\n            dispatch<ShowModalAction>({\n                type: ActionTypes.showModal,\n                payload: {\n                    error: msg\n                }\n            })\n        } else {\n            dispatch<ShowModalAction>({\n                type: ActionTypes.showModal,\n                payload: {\n                    message: msg\n                }\n            })\n        }\n        \n    }\n}\n\nexport const hideModal = () => {\n    return (dispatch: Dispatch) => {\n        dispatch<HideModalAction>({\n            type: ActionTypes.hideModal\n        })\n    }\n}\n\nexport const fetchQuizes = () => {\n    return async (dispatch: Dispatch) => {\n        dispatch<ShowLoaderAction>({\n            type: ActionTypes.showLoader\n        });\n        const response = await firebase.database().ref('/quizes');\n        response.on('value', snapshot => {\n            const data = snapshot.val();\n            const parsedData: Quiz[] = [];\n            for(let quiz in data){\n                if(data.hasOwnProperty(quiz)){\n                    parsedData.push({\n                        id: quiz,\n                        title: data[quiz].title,\n                        author: data[quiz].author,\n                        description: data[quiz].description,\n                        complexity: data[quiz].complexity,\n                        questionCount: parseInt(data[quiz].questionCount),\n                        timeCreated: new Date(data[quiz].timeCreated),\n                        bestResult: parseInt(data[quiz].bestResult)\n                    });\n                }\n            }\n            dispatch<FetchQuizesAction>({\n                type: ActionTypes.fetchQuizes,\n                payload: parsedData\n            });\n            dispatch<HideLoaderAction>({\n                type: ActionTypes.hideLoader\n            });\n        }, (errorObject: FirebaseError) => {\n            dispatch<ShowModalAction>({\n                type: ActionTypes.showModal,\n                payload: {\n                    error: errorObject.message\n                }\n            })\n            dispatch<HideLoaderAction>({\n                type: ActionTypes.hideLoader\n            });\n        })\n    }\n};\n\nexport const getActiveQuiz = (id: string) => {\n    return async (dispatch: Dispatch) => {\n        dispatch<ShowLoaderAction>({\n            type: ActionTypes.showLoader\n        });\n        const response = await firebase.database().ref(`/quizes/${id}`);\n        response.once('value', snapshot => {\n            const data = snapshot.val();\n            dispatch<GetActiveQuizAction>({\n                type: ActionTypes.getActiveQuiz,\n                payload: {\n                    id: id,\n                    title: data.title,\n                    author: data.author,\n                    description: data.description,\n                    complexity: data.complexity,\n                    questionCount: parseInt(data.questionCount),\n                    questions: data.questions,\n                    timeCreated: data.timeCreated,\n                    bestResult: data.bestResult\n                }\n            })\n            dispatch<HideLoaderAction>({\n                type: ActionTypes.hideLoader\n            });\n        }, (errorObject: FirebaseError) => {\n            dispatch<ShowModalAction>({\n                type: ActionTypes.showModal,\n                payload: {\n                    error: errorObject.message\n                }\n            })\n            dispatch<HideLoaderAction>({\n                type: ActionTypes.hideLoader\n            });\n        });\n    }\n};\n\nexport const addNewQuiz = (quiz: ActiveQuiz) => {\n    return async (dispatch: Dispatch) => {\n        await firebase.database().ref(`/quizes/${quiz.id}`)\n            .set({\n                title: quiz.title,\n                description: quiz.description,\n                author: quiz.author,\n                complexity: quiz.complexity,\n                questionCount: quiz.questionCount,\n                questions: quiz.questions,\n                timeCreated: quiz.timeCreated.getTime(),\n                bestResult: quiz.bestResult\n            })\n            .then(() => {\n                dispatch<ShowModalAction>({\n                    type: ActionTypes.showModal,\n                    payload: {\n                        message: 'New quiz was successfully added'\n                    }\n                })\n            })\n            .catch((e: FirebaseError) => {\n                dispatch<ShowModalAction>({\n                    type: ActionTypes.showModal,\n                    payload: {\n                        error: e.message\n                    }\n                })\n            })\n    }\n}\n\nexport const updateBestResult = (quizId: string | undefined, bestResult: number) => {\n    return async (dispatch: Dispatch) => {\n        if(quizId) {\n            await firebase.database().ref(`/quizes/${quizId}`)\n            .child('bestResult')\n            .set(bestResult)\n            .then(() => {\n                dispatch<ShowModalAction>({\n                    type: ActionTypes.showModal,\n                    payload: {\n                        message: 'Your time passed was successfully added'\n                    }\n                })\n            })\n            .catch((e: FirebaseError) => {\n                dispatch<ShowModalAction>({\n                    type: ActionTypes.showModal,\n                    payload: {\n                        error: e.message\n                    }\n                })\n            })\n        }   \n    }\n}\n\nexport const deleteQuiz = (quizId: string) => {\n    return async (dispatch: Dispatch) => {\n        await firebase.database().ref(`/quizes/${quizId}`)\n        .set(null)\n        .then(() => {\n            dispatch<ShowModalAction>({\n                type: ActionTypes.showModal,\n                payload: {\n                    message: 'Quiz was deleted'\n                }\n            })\n        })\n        .catch((e: FirebaseError) => {\n            dispatch<ShowModalAction>({\n                type: ActionTypes.showModal,\n                payload: {\n                    error: e.message\n                }\n            })\n        })\n    }\n}\n","import React from 'react';\n\nexport const Loader = () => {\n    return(\n        <div className=\"loader-container\">\n            <div className=\"loader\">\n                <svg viewBox=\"0 0 80 80\">\n                    <circle id=\"test\" cx=\"40\" cy=\"40\" r=\"32\"></circle>\n                </svg>\n            </div>\n\n            <div className=\"loader triangle\">\n                <svg viewBox=\"0 0 86 80\">\n                    <polygon points=\"43 8 79 72 7 72\"></polygon>\n                </svg>\n            </div>\n\n            <div className=\"loader\">\n                <svg viewBox=\"0 0 80 80\">\n                    <rect x=\"8\" y=\"8\" width=\"64\" height=\"64\"></rect>\n                </svg>\n            </div>\n        </div>\n    )\n};","import React from 'react';\nimport {Complexity} from \"../interfaces\";\nimport {dateFormatter} from \"../helpFunctions\";\nimport {useHistory} from 'react-router-dom';\nimport {timerFormatter} from '../helpFunctions';\nimport {useDispatch} from 'react-redux';\nimport {deleteQuiz} from '../redux/actions';\n\ninterface QuizCardProps {\n    key: string,\n    id: string,\n    title: string,\n    description: string,\n    complexity: Complexity,\n    author: string,\n    timeCreated: Date,\n    bestResult: number,\n    questionCount: number,\n    editable?: boolean\n}\n\nexport const QuizCard = ({id, title, description, complexity,\n                             author, timeCreated, bestResult, questionCount, editable}: QuizCardProps) => {\n    \n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    function setComplexity(): string {\n        switch (complexity) {\n            case Complexity.easy:\n                return 'success';\n            case Complexity.medium:\n                return 'warning';\n            case Complexity.hard:\n                return 'danger';\n            default:\n                return 'primary'\n        }\n    }\n\n    return(\n        <div className=\"card col-lg-6\">\n            <div className=\"card-body border-neon-primary\">\n                <div className=\"card-title\">\n                    <h3>{title}</h3>\n                    <span\n                        className={`badge badge-${setComplexity()}`}\n                    >{complexity}</span>\n                </div>\n                <div className=\"card-subtitle mb-2\">\n                    <span>Author:<br/>{author}</span>\n                    <span>{dateFormatter(timeCreated)}</span>\n                    <span>Best pass result: <br />{\n                        timerFormatter(bestResult) === \"00:00\"\n                        ? 'No results'\n                        : timerFormatter(bestResult)\n                    }</span>\n                </div>\n                <p className=\"card-text\">{description}</p>\n                <div className=\"card-footer\">\n                    {editable\n                        ? <>\n                            <div className=\"buttons-container\">\n                                <button \n                                    className=\"btn btn-danger\"\n                                    onClick={() => dispatch(deleteQuiz(id))}\n                                >Delete</button>\n                            </div>\n                            <span className=\"questions-xs-hide\">{questionCount} questions</span>\n                        </>\n                        : <>\n                            <button \n                                className=\"btn btn-secondary\"\n                                onClick={() => history.push(`/quiz/${id}`)}\n                            >Start</button>\n                            <span className=\"questions\">{questionCount} questions</span>\n                        </>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n};","import {getMonthName} from './';\n\n\nexport function dateFormatter(timeCreated: Date): string {\n\n    const hours = timeCreated.getHours() < 10 ? '0' + timeCreated.getHours() : timeCreated.getHours();\n    const minutes = timeCreated.getMinutes() < 10 ? '0' + timeCreated.getMinutes() : timeCreated.getMinutes();\n    const seconds = timeCreated.getSeconds() < 10 ? '0' + timeCreated.getSeconds() : timeCreated.getSeconds();\n    const day = timeCreated.getDate() < 10 ? '0' + timeCreated.getDate() : timeCreated.getDate();\n\n    return `${hours}:${minutes}:${seconds} | ${day} ${getMonthName(timeCreated)} ${timeCreated.getFullYear()}`\n}","\nexport function getMonthName(time: Date) {\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\",\n        \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n    return monthNames[time.getMonth()]\n}","\nimport React, {ChangeEvent} from 'react';\n\ninterface FinderProps {\n    title: string,\n    finder: string,\n    setFinder(value: string): void\n}\n\nexport const Finder = ({title, finder, setFinder}: FinderProps) => {\n\n    const changeHandle = (value: string): void => {\n        setFinder(value);\n    };\n\n    return(\n        <div className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\">\n                <span className=\"input-group-text bg-primary text-white\" id=\"finder\">{title}</span>\n            </div>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                aria-label=\"Default\"\n                aria-describedby=\"finder\"\n                value={finder}\n                onChange = {e => changeHandle(e.target.value)}\n            />\n        </div>\n    )\n};","import React, {useState, useEffect} from 'react';\nimport {Quiz} from '../interfaces';\nimport {Link, useHistory} from \"react-router-dom\";\nimport {Loader} from \"../components/UI/Loader\";\nimport {QuizCard} from \"../components/QuizCard\";\nimport {Finder} from \"../components/Finder\";\nimport {filter} from \"../helpFunctions\";\n\ninterface ProfileProps {\n    quizesListing: Quiz[],\n    loading: boolean,\n    logged: boolean\n}\n\nexport const Profile = ({quizesListing, loading, logged}: ProfileProps) => {\n    const history = useHistory();\n    useEffect(() => {\n        if(!logged) {\n            history.push('/login');\n        }\n    }, []);\n\n    const [finder, setFinder] = useState<string>('');\n\n    function renderQuizes() {\n        const filtered = filter(finder, quizesListing);\n\n        return filtered.map((quiz: Quiz): JSX.Element => {\n            return(\n                <QuizCard\n                    key={quiz.id}\n                    id = {quiz.id}\n                    title = {quiz.title}\n                    description = {quiz.description}\n                    complexity={quiz.complexity}\n                    author = {quiz.author}\n                    timeCreated = {quiz.timeCreated}\n                    bestResult = {quiz.bestResult}\n                    questionCount = {quiz.questionCount}\n                    editable = {true}\n                />\n            )\n        })\n    }\n\n    return(\n        <section className=\"profile\">\n            <div className=\"jumbotron jumbotron-fluid wrapper-bg border-neon-primary\">\n                <div className=\"jumbotron-title mb-3\">\n                    <h1 className=\"display-4\">Welcome</h1>\n                    <Link to=\"/quiz-creator\" className=\"btn btn-outline-secondary neon-hover btn-big\">Create quiz</Link>\n                </div>\n                <Finder\n                    title=\"Find quiz\"\n                    finder={finder}\n                    setFinder={setFinder}\n                />\n            </div>\n            {loading\n                ? <Loader/>\n                : <div className=\"quizes-container row\">\n                    {renderQuizes()}\n                </div>\n            }\n        </section>\n    )\n};","import React from 'react';\nimport {Complexity, NewQuiz} from \"../../interfaces\";\n\ninterface CreatorMainInfoProps {\n    newQuiz: NewQuiz,\n    setNewQuizState(newQuiz: NewQuiz): void,\n}\n\nexport const CreatorMainInfo = ({newQuiz, setNewQuizState}: CreatorMainInfoProps) => {\n    const setProgress = (): {width: number, color: string}=> {\n        if(newQuiz.complexity === Complexity.easy) {\n            return {\n                width: 10,\n                color: 'success'\n            }\n        } else if(newQuiz.complexity === Complexity.medium) {\n            return {\n                width: 50,\n                color: 'warning'\n            }\n        } else {\n            return {\n                width: 90,\n                color: 'danger'\n            }\n        }\n    }\n\n    return(\n        <div className=\"main-info-container wrapper-bg border-neon-primary\">\n            <div className=\"form-group row\">\n                <div className=\"col-lg-6 col-12\">\n                    <h2 className=\"neon-text-small\">Title</h2>\n                    <input\n                        type=\"text\"\n                        className=\"form-control form-control-lg\"\n                        value={newQuiz.title}\n                        onChange={(e) => setNewQuizState({\n                            ...newQuiz,\n                            title: e.target.value\n                        })}\n                    />\n                    {newQuiz.errors?.title\n                        ? <small className=\"form-text\">\n                            {newQuiz.errors?.title}\n                        </small> : null\n                    }\n                </div>\n                <div className=\"col-lg-6 col-12\">\n                    <h2 className=\"neon-text-small\">Complexity</h2>\n                    <div className=\"progress\">\n                        <div\n                            className={`progress-bar progress-bar-striped bg-${setProgress().color}`}\n                            role=\"progressbar\"\n                            style={{width: `${setProgress().width}%`}}\n                        >\n                        </div>\n                    </div>\n                    <div className=\"complexity-buttons-container\">\n                        <button\n                            className=\"btn btn-success\"\n                            onClick={() => setNewQuizState({\n                                ...newQuiz,\n                                complexity: Complexity.easy\n                            })}\n                        >Easy</button>\n                        <button\n                            className=\"btn btn-warning\"\n                            onClick={() => setNewQuizState({\n                                ...newQuiz,\n                                complexity: Complexity.medium\n                            })}\n                        >Medium</button>\n                        <button\n                            className=\"btn btn-danger\"\n                            onClick={() => setNewQuizState({\n                                ...newQuiz,\n                                complexity: Complexity.hard\n                            })}\n                        >Hard</button>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <h2 className=\"neon-text-small\">Description</h2>\n                    <textarea\n                        className=\"form-control\"\n                        rows={3}\n                        value={newQuiz.description}\n                        onChange={(e) => setNewQuizState({\n                            ...newQuiz,\n                            description: e.target.value\n                        })}\n                    >\n                    </textarea>\n                    {newQuiz.errors?.description\n                        ? <small className=\"form-text\">\n                            {newQuiz.errors?.description}\n                        </small> : null\n                    }\n                </div>\n            </div>\n        </div>\n    )\n};","\nimport React from 'react';\nimport {RightAnswer} from \"../../interfaces\";\n\ninterface CreatorAnswerProps {\n    index: number,\n    value: string,\n    activeIndex: RightAnswer | undefined,\n    onChangeInput(inputName: string, value: string, index?: number): void,\n    onChangeRightAnswer(indexOfAnswer: RightAnswer): void\n}\n\nexport const CreatorAnswer = ({index, value, activeIndex, onChangeInput, onChangeRightAnswer}: CreatorAnswerProps) => {\n    return(\n        <div className=\"input-group col-12 col-md-6 mt-3\">\n            <div className=\"input-group-prepend\">\n                <button\n                    className={activeIndex === index ? \"btn btn-primary active\" : \"btn btn-primary\"}\n                    onClick={() => onChangeRightAnswer(index)}\n                >{index + 1}</button>\n            </div>\n            <input\n                name=\"answer\"\n                type=\"text\"\n                className=\"form-control\"\n                value={value}\n                onChange={(e) => onChangeInput(e.target.name, e.target.value, index)}\n            />\n        </div>\n    )\n};","import {QuestionBlock, RightAnswer} from \"../interfaces\";\n\nexport interface ValidateErrorQuestion {\n    textInputs?: string,\n    rightAnswer?: string,\n    deleteEmpty?: string,\n    limitReached?: string\n}\n\nexport function validateQuestion(\n    inputs: QuestionBlock,\n    length?: number,\n    limit?: number\n): ValidateErrorQuestion {\n\n    let errors: ValidateErrorQuestion = {};\n\n    if(length && limit){\n        if(length > limit) {\n            return {\n                limitReached: `Limit was reached! Max is ${limit}`\n            }\n        }\n    }\n\n    if(!inputs.question) {\n        if(!inputs.answers.every((answer: string) => answer !== '')) {\n            errors.textInputs = 'Fill all fields!';\n        }\n        errors.textInputs = 'Fill all fields!';\n    } else {\n        if(!inputs.answers.every((answer: string) => answer !== '')) {\n            errors.textInputs = 'Fill all fields!';\n        }\n    }\n    if(!inputs.rightAnswer && inputs.rightAnswer !== RightAnswer.one) {\n        errors.rightAnswer = \"Choose right answer!\"\n    }\n\n    return errors;\n}","import React, {useEffect, useState} from 'react';\nimport {NewQuestionBlock, NewQuestionBlocks, NewQuiz, QuestionBlock, RightAnswer} from \"../../interfaces\";\nimport {CreatorAnswer} from \"./CreatorAnswer\";\nimport {validateQuestion} from \"../../validate\";\nimport {isEmptyObject} from \"../../helpFunctions\";\n\ninterface CreatorQuestionsProps {\n    newQuiz: NewQuiz,\n    setNewQuizState(newQuiz: NewQuiz): void,\n}\n\nexport const CreatorQuestions = ({newQuiz, setNewQuizState}: CreatorQuestionsProps) => {\n    const [questions, setQuestions] = useState<NewQuestionBlocks>({\n        listing: [{\n            question: '1',\n            answers: ['1', '1', '1', '1'],\n            rightAnswer: RightAnswer.two,\n            wasAdded: false\n        }],\n        activeQuestion: 0,\n        limit: 30\n    })\n\n    useEffect(() => {\n        loadQuestionToMainState()\n    }, [questions.listing[questions.activeQuestion], questions.listing])\n\n    const onChangeInput = (inputName: string, value: string, index?: number) => {\n        const tempListing = questions.listing;\n\n        if(inputName === 'question'){\n            tempListing[questions.activeQuestion].question = value;\n        }\n        if(inputName === 'answer' && (index || index === 0)){\n            tempListing[questions.activeQuestion].answers[index] = value;\n        }\n        setQuestions({\n            ...questions,\n            listing: tempListing\n        })\n    }\n\n    const onChangeRightAnswer = (indexOfAnswer: RightAnswer) => {\n        const tempListing = questions.listing;\n\n        tempListing[questions.activeQuestion].rightAnswer = indexOfAnswer;\n        setQuestions({\n            ...questions,\n            listing: [...tempListing]\n        })\n    }\n\n    const onCheckQuestionHandler = (): void => {\n        setQuestions({\n            ...questions,\n            errors: {}\n        });\n\n        const errors = validateQuestion(\n            questions.listing[questions.activeQuestion],\n            questions.listing.length,\n            questions.limit\n        );\n\n        if(!isEmptyObject(errors)) {\n            setQuestions({\n                ...questions,\n                errors: errors\n            })\n        } else {\n            if(questions.listing[questions.activeQuestion].wasAdded){\n                setQuestions({\n                    ...questions,\n                    activeQuestion: questions.activeQuestion + 1,\n                    errors: {}\n                })\n            } else {\n                const emptyQuestion: NewQuestionBlock = {\n                    question: '',\n                    answers: ['', '', '', ''],\n                    rightAnswer: undefined,\n                    wasAdded: false\n                }\n                const tempListing = questions.listing;\n                tempListing[questions.activeQuestion].wasAdded = true;\n                tempListing.push(emptyQuestion);\n                setQuestions({\n                    ...questions,\n                    listing: tempListing,\n                    activeQuestion: questions.activeQuestion + 1,\n                    errors: {}\n                })\n            }\n        }\n\n    };\n\n    const onCheckQuestionByIndex = (index: number) => {\n        if(!questions.listing[index].wasAdded && questions.listing.length > 1) {\n            setQuestions({\n                ...questions,\n                errors: {}\n            });\n\n            const errors = validateQuestion(questions.listing[questions.activeQuestion]);\n\n            if(!isEmptyObject(errors)) {\n                setQuestions({\n                    ...questions,\n                    errors: errors\n                })\n            } else {\n                setQuestions({\n                    ...questions,\n                    activeQuestion: index,\n                    errors: {}\n                })\n            }\n        } else if (questions.listing[questions.activeQuestion].wasAdded){\n\n            const errors = validateQuestion(questions.listing[questions.activeQuestion]);\n\n            if(!isEmptyObject(errors)) {\n                setQuestions({\n                    ...questions,\n                    errors: errors\n                })\n            } else {\n                setQuestions({\n                    ...questions,\n                    activeQuestion: index,\n                    errors: {}\n                })\n            }\n        } else {\n            setQuestions({\n                ...questions,\n                activeQuestion: index,\n                errors: {}\n            })\n        }\n    }\n\n    const onDeleteQuestion = (): void => {\n            if(!questions.listing[questions.activeQuestion].wasAdded) {\n                setQuestions({\n                    ...questions,\n                    errors: {\n                        deleteEmpty: \"You can't delete non-added question!\"\n                    }\n                })\n            } else {\n                const tempListing = questions.listing;\n                tempListing.splice(questions.activeQuestion, 1);\n                setQuestions({\n                    ...questions,\n                    listing: tempListing,\n                    errors: {}\n                })\n            }\n    }\n\n    const onDeleteAllQuestions = (): void => {\n        if(questions.listing.length !== 1) {\n            const emptyQuestion: NewQuestionBlock = {\n                question: '',\n                answers: ['', '', '', ''],\n                rightAnswer: undefined,\n                wasAdded: false\n            }\n            setQuestions({\n                ...questions,\n                listing: [emptyQuestion],\n                activeQuestion: 0\n            })\n        }\n    }\n\n    function renderQuestionIndexes() {\n        return questions.listing.map((item: NewQuestionBlock, index: number): JSX.Element => {\n            return (\n                <button\n                    key={index}\n                    className={\n                        index === newQuiz.errors?.questions.errorIndex\n                            ? \"badge badge-danger\"\n                            : index === questions.activeQuestion\n                            ? \"badge badge-secondary\"\n                            : \"badge badge-primary\"\n                    }\n                    onClick={() => onCheckQuestionByIndex(index)}\n                >{index + 1}</button>\n            )\n        })\n    }\n\n    function renderAnswers() {\n        return questions.listing[questions.activeQuestion].answers.map((value, index): JSX.Element => {\n            return (\n                <CreatorAnswer\n                    key={index.toString()}\n                    index={index}\n                    value={questions.listing[questions.activeQuestion].answers[index]}\n                    activeIndex={questions.listing[questions.activeQuestion].rightAnswer}\n                    onChangeInput={onChangeInput}\n                    onChangeRightAnswer={onChangeRightAnswer}\n                />\n            )\n        })\n    }\n\n    function renderErrors() {\n        if(!isEmptyObject(questions.errors as Object)){\n            return Object.values(questions.errors as Object).map((error: string, index: number): JSX.Element => {\n                return(\n                    <span\n                        className=\"mr-2 neon-text-very-small\"\n                        key={index}\n                    >{error}</span>\n                )\n            })\n        }\n    }\n\n    function loadQuestionToMainState() {\n        if(questions.listing.length > 1 && isEmptyObject(questions.errors as Object)) {\n            const readyQuestions = questions.listing.map((question: NewQuestionBlock): QuestionBlock => {\n                return {\n                    question: question.question,\n                    answers: question.answers,\n                    rightAnswer: question.rightAnswer\n                }\n            })\n            readyQuestions.pop();\n            setNewQuizState({\n                ...newQuiz,\n                questions: readyQuestions,\n                questionCount: readyQuestions.length\n            })\n        } else {\n            setNewQuizState({\n                ...newQuiz,\n                questions: [],\n                questionCount: 0\n            })\n        }\n    }\n\n    return(\n        <div className=\"create-questions-container wrapper-bg border-neon-primary\">\n            <h2 className=\"neon-text-small\">Questions</h2>\n            {newQuiz.errors?.questions\n                ? <small className=\"form-text\">\n                    {newQuiz.errors?.questions.message}\n                </small> : null\n            }\n            <div className=\"p-3\">\n                <div className=\"questions-indexes-container\">\n                    {renderQuestionIndexes()}\n                </div>\n                <div className=\"input-group mt-2\">\n                    <div className=\"input-group-prepend\">\n                        <div className=\"input-group-text bg-primary text-white\">Question</div>\n                    </div>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"question\"\n                        value={questions.listing[questions.activeQuestion].question}\n                        onChange={(e) => onChangeInput(e.target.name, e.target.value)}\n                    />\n                </div>\n                <div className=\"row\">\n                    {renderAnswers()}\n                </div>\n                <div className=\"mt-3\">\n                    {\n                        questions.listing[questions.activeQuestion].wasAdded\n                        ? <button\n                                className={\"btn btn-primary mr-2\"}\n                                onClick={() => onCheckQuestionHandler()}\n                            >Update question\n                        </button>\n                            : <button\n                                className={\"btn btn-primary mr-2\"}\n                                onClick={() => onCheckQuestionHandler()}\n                            >Add question\n                            </button>\n\n                    }\n                    <button\n                        className=\"btn btn-danger mr-2\"\n                        onClick={() => onDeleteQuestion()}\n                    >Delete</button>\n                    <button\n                        className=\"btn btn-danger mr-2\"\n                        onClick={() => onDeleteAllQuestions()}\n                    >Delete all</button>\n                    {renderErrors()}\n                </div>\n            </div>\n        </div>\n    )\n};","import React, {useState, useEffect} from 'react';\nimport {CreatorMainInfo} from \"../components/creator/CreatorMainInfo\";\nimport {useHistory} from \"react-router-dom\";\nimport {useDispatch} from \"react-redux\";\nimport {ActiveQuiz, Complexity, NewQuiz} from \"../interfaces\";\nimport {isEmptyObject} from \"../helpFunctions\";\nimport {CreatorQuestions} from \"../components/creator/CreatorQuestions\";\nimport {validateMain} from \"../validate\";\nimport {addNewQuiz} from \"../redux/actions\";\n\ninterface QuizCreatorProps {\n    logged: boolean;\n}\n\nexport const QuizCreator = ({logged}: QuizCreatorProps) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n        if(!logged) {\n            history.push('/login');\n        }\n    }, [])\n\n    const [newQuiz, setNewQuizState] = useState<NewQuiz>({\n        title: '',\n        description: '',\n        complexity: Complexity.medium,\n        questions: [],\n        questionCount: 0\n    });\n\n    const checkQuizValidation = (): void => {\n        const errors = validateMain(newQuiz);\n        if(!isEmptyObject(errors) && !isEmptyObject(errors.questions)) {\n            setNewQuizState({\n                ...newQuiz,\n                errors: errors\n            })\n        } else {\n            setNewQuizState({\n                ...newQuiz,\n                errors: {\n                    questions: {}\n                }\n            })\n            const readyQuiz: ActiveQuiz = {\n                id: Math.random().toString(36).substring(7),\n                title: newQuiz.title,\n                description: newQuiz.description,\n                complexity: newQuiz.complexity,\n                questions: newQuiz.questions,\n                questionCount: newQuiz.questionCount,\n                author: \"Admin\",\n                bestResult: 0,\n                timeCreated: new Date()\n            }\n            dispatch(addNewQuiz(readyQuiz));\n\n            history.push('/profile');\n        }\n    };\n\n    return(\n        <section className=\"quiz-creator-container\">\n            <div className=\"jumbotron jumbotron-fluid wrapper-bg border-neon-primary\">\n                <div className=\"jumbotron-title\">\n                    <h1 className=\"display-4\">Quiz creator</h1>\n                    <div className=\"buttons-jumbo-container\">\n                        <button\n                            onClick={() => history.goBack()}\n                            className=\"btn btn-outline-danger neon-hover-red btn-big\"\n                        >Cancel</button>\n                        <button\n                            className=\"btn btn-outline-secondary neon-hover btn-big\"\n                            onClick={() => checkQuizValidation()}\n                        >Create</button>\n                    </div>\n                </div>\n            </div>\n            <CreatorMainInfo\n                newQuiz={newQuiz}\n                setNewQuizState={setNewQuizState}\n            />\n            <CreatorQuestions\n                newQuiz={newQuiz}\n                setNewQuizState={setNewQuizState}\n            />\n        </section>\n    )\n}","import {NewQuiz, QuestionBlock} from \"../interfaces\";\n\nexport interface ValidateErrorsMain {\n    title?: string,\n    description?: string,\n    questions: {\n        message?: string,\n        errorIndex?: number\n    },\n}\n\nexport function validateMain(quiz: NewQuiz): ValidateErrorsMain {\n\n    const minQuestions = 5;\n\n    let errors: ValidateErrorsMain = {\n        questions: {}\n    };\n\n    if(!quiz.title) {\n        errors.title = 'This field is required!';\n    }\n    if (quiz.title && (quiz.title.length < 3 || quiz.title.length > 20)) {\n        errors.title = 'Title length must be in range from 3 to 20 characters!'\n    }\n    if (!quiz.description) {\n        errors.description = 'This field is required!';\n    }\n    if (quiz.description && (quiz.description.length < 3 || quiz.description.length > 20)) {\n        errors.description = 'Description length must be in range from 3 to 150 characters!';\n    }\n\n    if (quiz.questions.length < minQuestions || quiz.questionCount < minQuestions) {\n        errors.questions.message = `Quiz must contain at least ${minQuestions} question!`;\n    } else {\n        quiz.questions.forEach((question: QuestionBlock, index: number) => {\n            const checkAnswers = question.answers.every((answer:string) => answer);\n            if(!checkAnswers && question.question.length !== 0 && question.rightAnswer !== undefined) {\n                errors.questions.message = `Check \"${index + 1}\" question to finish creation quiz!`;\n                errors.questions.errorIndex = index;\n                return\n            }\n        })\n    }\n\n    return errors\n}","import React from 'react';\nimport {OrderType} from \"../interfaces\";\n\ninterface OrderOptProps {\n    valueToShow: string,\n    value: OrderType,\n    orderType: OrderType,\n    onChangeHandler(e: {target: HTMLInputElement}): void\n}\n\nexport const OrderOpt = ({valueToShow, value, orderType, onChangeHandler}: OrderOptProps) => {\n    return(\n        <label className={orderType === valueToShow ? 'btn btn-secondary active' : 'btn btn-primary'}>\n            <input\n                type=\"radio\"\n                value={value}\n                checked={false}\n                onChange={(e) => onChangeHandler(e)}\n            /> {valueToShow}\n        </label>\n    )\n};","import React from 'react';\nimport {OrderDirection} from \"../../interfaces\";\n\ninterface SwitcherProps {\n    optionsLabel: OrderDirection,\n    onSwitchHandler(): void\n}\n\nexport const Switcher = ({optionsLabel, onSwitchHandler}: SwitcherProps) => {\n    return(\n        <div className=\"switcher-container\">\n            {optionsLabel\n                ? <span className=\"text-white\">ASC</span>\n                : <span className=\"text-secondary\">DESC</span>\n            }\n            <label className=\"switcher\">\n                <input type=\"checkbox\" onClick = {() => onSwitchHandler()} />\n                    <span className=\"slider\"></span>\n            </label>\n        </div>\n    )\n};","import React from 'react';\nimport {OrderDirection, OrderFull, OrderType} from \"../interfaces\";\nimport {OrderOpt} from \"./OrderOpt\";\nimport {Switcher} from \"./UI/Switcher\";\n\ninterface OrderOptionsProps {\n    order: OrderFull,\n    setOrder(order: OrderFull): void\n}\n\nexport const OrderOptions = ({order, setOrder}: OrderOptionsProps) => {\n\n    const onChangeHandler = (e: {target: HTMLInputElement}) => {\n        switch(e.target.value){\n            case 'dataCreated':\n                setOrder({...order, type: OrderType.dataCreated});\n                break;\n            case 'questions':\n                setOrder({...order, type: OrderType.questions});\n                break;\n            case 'complexity':\n                setOrder({...order, type: OrderType.complexity});\n                break;\n        }\n    };\n\n    const onSwitchOrder = (): void => {\n        if(order.direction === OrderDirection.asc) {\n            setOrder({...order, direction: OrderDirection.desc})\n            return\n        } else {\n            setOrder({...order, direction: OrderDirection.asc})\n            return\n        }\n    }\n\n    function renderOpts() {\n        return Object.keys(OrderType).map((opt, index): JSX.Element => {\n            return (\n                <OrderOpt\n                    key={index}\n                    // @ts-ignore\n                    valueToShow={OrderType[opt as any]}\n                    value={opt as OrderType}\n                    orderType={order.type}\n                    onChangeHandler={onChangeHandler}\n                />\n            )\n        })\n    }\n\n    return(\n        <>\n            <div className=\"order-options-header\">\n                <h3 className=\"neon-text-small\">Order by: </h3>\n                <Switcher\n                    optionsLabel={order.direction}\n                    onSwitchHandler={onSwitchOrder}\n                />\n            </div>\n            <div className=\"order-options-container btn-group btn-group-toggle\">\n                {renderOpts()}\n            </div>\n        </>\n    )\n};","import React, {useState} from 'react';\nimport {Quiz, OrderDirection, OrderType, OrderFull} from \"../interfaces\";\nimport {Loader} from \"../components/UI/Loader\";\nimport {QuizCard} from \"../components/QuizCard\";\nimport {Finder} from \"../components/Finder\";\nimport {OrderOptions} from \"../components/OrderOptions\";\nimport {sort, filter} from \"../helpFunctions\";\n\ninterface QuizListingProps {\n    quizesListing: Quiz[],\n    loading: boolean\n}\n\nexport const QuizListing = ({quizesListing, loading}: QuizListingProps) => {\n\n    const [finder, setFinder] = useState<string>('');\n    const [order, setOrder] = useState<OrderFull>({type: OrderType.dataCreated, direction: OrderDirection.asc});\n\n    function renderQuizes() {\n        const tempQuizesList = [...quizesListing];\n\n        const sorted = sort(order, tempQuizesList);\n        const filtered = filter(finder, sorted);\n\n        return filtered.map((quiz: Quiz): JSX.Element => {\n            return(\n                    <QuizCard\n                        key={quiz.id}\n                        id = {quiz.id}\n                        title = {quiz.title}\n                        description = {quiz.description}\n                        complexity={quiz.complexity}\n                        author = {quiz.author}\n                        timeCreated = {quiz.timeCreated}\n                        bestResult = {quiz.bestResult}\n                        questionCount = {quiz.questionCount}\n                    />\n            )\n        })\n    }\n\n    return(\n        <section className=\"quiz-listing\">\n            <div className=\"jumbotron jumbotron-fluid wrapper-bg border-neon-primary\">\n                <div className=\"jumbotron-title mb-3\">\n                    <h1 className=\"display-4\">Quiz listing</h1>\n                </div>\n                <OrderOptions\n                    order={order}\n                    setOrder={setOrder}\n                />\n                <Finder\n                    title=\"Find quiz\"\n                    finder={finder}\n                    setFinder={setFinder}\n                />\n            </div>\n            {loading\n                ? <Loader/>\n                : <div className=\"quizes-container row\">\n                    {renderQuizes()}\n                </div>\n            }\n        </section>\n    )\n};","import {Complexity, OrderFull, OrderType, Quiz} from \"../interfaces\";\n\nexport function sort(order: OrderFull, collection: Quiz[]): Quiz[] {\n    switch(order.type){\n        case OrderType.dataCreated:\n            collection.sort((leftHand, rightHand) => {\n                return leftHand.timeCreated > rightHand.timeCreated ? -1 : 1\n            });\n            return order.direction ? collection.reverse() : collection;\n        case OrderType.questions:\n            collection.sort((leftHand, rightHand) => {\n                return leftHand.questionCount > rightHand.questionCount ? -1 : 1\n            });\n            return order.direction ? collection.reverse() : collection;\n        case OrderType.complexity:\n            const collectionWithNumbers = collection.map((quiz: Quiz): {quiz: Quiz, value: number} => {\n                if(quiz.complexity === Complexity.easy) {\n                    return {quiz, value: 0}\n                } else if(quiz.complexity === Complexity.medium) {\n                    return {quiz, value: 1}\n                } else {\n                    return {quiz, value: 2}\n                }\n            })\n\n            collectionWithNumbers.sort((leftHand, rightHand): number => {\n                return leftHand.value > rightHand.value ? 1 : -1;\n            });\n\n            const readyCollection = collectionWithNumbers.map((quizItem: {quiz: Quiz, value: number}): Quiz => {\n                return quizItem.quiz\n            })\n\n            return order.direction ? readyCollection.reverse() : readyCollection;\n    }\n}","import React, {CSSProperties} from 'react';\n// @ts-ignore\nimport {AnimatedValue, ForwardedProps, animated} from \"react-spring\";\nimport {QuestionBlock, UserQuizAnswers} from \"../../interfaces\";\n\n\ninterface QuizQuestionProps {\n    activeQuestion: number,\n    setActiveQuestion(activeQuestion: number): void,\n    userAnswersState: UserQuizAnswers,\n    setUserAnswerState(userAnswersState: UserQuizAnswers): void,\n    style: AnimatedValue<ForwardedProps<ForwardedProps<CSSProperties>>>,\n    questionBlock: QuestionBlock,\n    lastQuestion: number\n}\n\nexport const QuizQuestion = ({activeQuestion, userAnswersState, setActiveQuestion,\n                                 setUserAnswerState, style, questionBlock, lastQuestion}: QuizQuestionProps) => {\n\n    const onAnswerClickHandler = (index: number) => {\n        const tempListing = userAnswersState.answersListing;\n        tempListing[activeQuestion] = index;\n\n        setUserAnswerState({\n            ...userAnswersState,\n            answersListing: tempListing,\n            errors: []\n        })\n        if(activeQuestion !== lastQuestion){\n            setActiveQuestion(activeQuestion + 1);\n        }\n    }\n\n\n    function renderAnswers() {\n        return questionBlock.answers.map((answer: string, index: number): JSX.Element => {\n            return (\n                <div\n                    className=\"answer-hld col-12 col-lg-6 mt-3 p-0\"\n                    key={index}\n                    onClick={() => onAnswerClickHandler(index)}\n                >\n                    <span className=\"neon-text-very-small\">{index + 1}.</span>\n                    <div\n                        className={\n                            userAnswersState.answersListing[activeQuestion] === index\n                                ? \"answer btn btn-primary neon-text-very-small neon-hover neon-text-very-small\"\n                                : \"answer btn btn-primary neon-text-very-small\"\n                        }\n                    >\n                        {answer}\n                    </div>\n                </div>\n            )\n        });\n    }\n\n    function renderEmptyQuestions(): string {\n        let emptyIndexes = ' ';\n        for (let i = 0; i < userAnswersState.errors.length; i++) {\n            if(i === userAnswersState.errors.length - 1) {\n                emptyIndexes+=`${userAnswersState.errors[i] + 1} `\n                break;\n            }\n            emptyIndexes+=`${userAnswersState.errors[i] + 1}, `\n        }\n        \n        return emptyIndexes.length === 3 \n        ? `Fill answers in${emptyIndexes} question to finish quiz!`\n        : `Fill answers in${emptyIndexes} questions to finish quiz!`;\n    }\n\n    return(\n        <animated.div\n            style={style}\n            className=\"question wrapper-bg border-neon-primary\"\n        >\n            <h2 className=\"neon-text-small\">{questionBlock.question}</h2>\n            <div className=\"answers row order-options-container btn-group btn-group-toggle\">\n                {renderAnswers()}\n            </div>\n            {userAnswersState.errors.length > 0\n                ? <small className=\"form-text mt-2\">\n                    {renderEmptyQuestions()}\n                </small> : null\n            }\n        </animated.div>\n    )\n}","import React, {useEffect} from 'react';\nimport {timerFormatter} from '../../helpFunctions';\n\n\ninterface QuizTimerProps {\n    timer: number,\n    setTimer(timer: number): void\n}\n\nexport const QuizTimer = ({timer, setTimer}: QuizTimerProps) => {\n\n    //const quizTimeLimit = 20; //in minutes\n    useEffect(() => {\n        const timeHandler = setTimeout(() => setTimer(timer + 1000), 1000)\n        return () => {\n            clearTimeout(timeHandler)\n        }\n    }, [timer])\n\n    return (\n        <div className=\"quiz-timer col-2\">\n            {timerFormatter(timer)}\n        </div>\n    )\n};","import React from 'react';\nimport {useTransition} from 'react-spring'\nimport {QuestionBlock, UserQuizAnswers} from \"../../interfaces\";\nimport {QuizQuestion} from \"./QuizQuestion\";\nimport {QuizTimer} from \"./QuizTimer\";\n\ninterface QuizQuestionsProps {\n    timer: number,\n    setTimer(timer: number): void,\n    activeQuestion: number,\n    setActiveQuestion(activeQuestion: number): void,\n    userAnswersState: UserQuizAnswers,\n    setUserAnswerState(userAnswerState: UserQuizAnswers): void,\n    questionBlocks: QuestionBlock[] | undefined\n}\n\nexport const QuizQuestions = ({timer, setTimer, activeQuestion, setActiveQuestion, userAnswersState, setUserAnswerState, questionBlocks}: QuizQuestionsProps) => {\n    const transitions = useTransition(activeQuestion, item => item, {\n        from: { opacity: 0, transform: 'translateY(100%)' },\n        enter: { opacity: 1, transform: 'translateY(0)' },\n        leave: { opacity: 0, transform: 'translateY(50%)' },\n    })\n\n    function noAnswerQuestion(index: number): boolean {\n        if(userAnswersState.errors.find(error => error === index)) {\n            return true;\n        } else return false;\n    }\n\n    function renderQuestionIndexes() {\n        if(questionBlocks) {\n            return questionBlocks.map((item: QuestionBlock, index: number): JSX.Element => {\n                return (\n                    <button\n                        onClick={() => setActiveQuestion(index)}\n                        key={index}\n                        className={\n                            index === activeQuestion\n                                ? \"btn btn-outline-primary neon-hover neon-text-very-small\"\n                                : typeof userAnswersState.answersListing[index] !== 'undefined'\n                                    ? \"btn btn-secondary\"\n                                    : noAnswerQuestion(index)\n                                        ? \"btn btn-danger\"\n                                        : \"btn btn-outline-primary\"\n                        }\n                    >{index + 1}</button>\n                )\n            })\n        }\n    }\n\n    return(\n        <>\n            {\n                questionBlocks\n                ?\n                    <>\n                        <div className=\"question-indexes wrapper row\">\n                            <div className=\"col-10\">\n                                {renderQuestionIndexes()}\n                            </div>\n                            <QuizTimer \n                                timer={timer}\n                                setTimer={setTimer}\n                            />\n                        </div>\n                            {transitions.map(({ item, props, key }: any): JSX.Element => {\n                                return (\n                                    <QuizQuestion\n                                        activeQuestion={activeQuestion}\n                                        setActiveQuestion={setActiveQuestion}\n                                        userAnswersState={userAnswersState}\n                                        setUserAnswerState={setUserAnswerState}\n                                        style={props}\n                                        questionBlock={questionBlocks[item]}\n                                        key={key}\n                                        lastQuestion={questionBlocks.length - 1}\n                                    />\n                                )\n                            })}\n                    </>\n                    : null\n                //todo error\n            }\n        </>\n\n    )\n}","import React, {useRef} from 'react';\nimport {ActiveQuiz, UserQuizAnswers} from '../../interfaces';\nimport {timerFormatter} from '../../helpFunctions';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\nimport {updateBestResult} from '../../redux/actions'\n\ninterface QuizFinishedProps {\n    activeQuiz: ActiveQuiz | null,\n    timer: number,\n    userAnswersState: UserQuizAnswers\n}\n\ninterface ResultsInterface {\n    question: string,\n    answer: string,\n    wasRight: boolean\n}\n\nexport const QuizFinished = ({activeQuiz, timer, userAnswersState}: QuizFinishedProps) => {\n    const willMount = useRef<boolean>(true);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    let wrongAnswers = 0;\n    let results: JSX.Element[] = [];\n    \n    const useComponentWillMount = (func: () => JSX.Element[]) => {        \n        if (willMount.current) {\n            results = func();\n        }\n        willMount.current = false;\n    };\n\n    function renderCheckAnswers() {\n        const results: ResultsInterface[] = [];\n    \n        if(activeQuiz) {\n            for (let i = 0; i < activeQuiz.questionCount; i++) {\n                if(activeQuiz.questions[i].rightAnswer === userAnswersState.answersListing[i]) {\n                    results.push({\n                        question: activeQuiz.questions[i].question,\n                        answer: activeQuiz.questions[i].answers[userAnswersState.answersListing[i]],\n                        wasRight: true\n                    });\n                } else {\n                    wrongAnswers++;\n                    results.push({\n                        question: activeQuiz.questions[i].question,\n                        answer: activeQuiz.questions[i].answers[userAnswersState.answersListing[i]],\n                        wasRight: false\n                    });\n                }\n            }\n        }\n\n        return results.map((result: ResultsInterface, index: number): JSX.Element => {\n            return (\n                <li className=\"result\" key={index}>\n                    <div className=\"result-question\">\n                        <span className=\"neon-text-very-small\">{index + 1}. {result.question}</span>\n                    </div>\n                    <div className=\"result-answer\">\n                        <span className=\"neon-text-very-small\">{result.answer}</span>\n                        {\n                            result.wasRight\n                            ? <button className=\"btn btn-success\">Success</button>\n                            : <button className=\"btn btn-danger\">Failure</button>\n                        }\n                    </div>\n                </li>\n            )\n        })\n    }\n\n    useComponentWillMount(() => renderCheckAnswers());\n\n    const updateResult = () => {\n        if(activeQuiz) {\n            dispatch(updateBestResult(activeQuiz.id, timer))\n            history.push('/');\n        }\n    };\n    \n    return (\n        <>\n            <div className=\"finished-container wrapper-bg border-neon-primary\">\n                <div className=\"finished-title\">\n                    <h2 className=\"neon-text-small\">Results</h2>\n                    <span className=\"neon-text-very-small\">Finished at {timerFormatter(timer)}</span>\n                </div>\n                <ul className=\"results\">\n                    {results}\n                </ul>\n            </div>\n            <div className=\"response-container wrapper-bg border-neon-primary\">\n                {\n                    wrongAnswers > 1\n                    ? <div className=\"failure neon-text-small\">\n                        Failure. Quiz wasn't passed. Max 1 wrong answer allowed.\n                    </div>\n                    : <div className=\"success neon-text-small\">\n                        Congratulations! You're passed this quiz.\n                        <button \n                            className=\"btn btn-outline-secondary neon-hover\"\n                            onClick={() => updateResult()}\n                        >\n                            Record changes\n                        </button>\n                    </div>\n                }\n            </div>\n        </>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {useParams, useHistory} from 'react-router-dom';\nimport {ActiveQuiz, QuizRouterParams, UserQuizAnswers} from \"../interfaces\";\nimport {getActiveQuiz} from \"../redux/actions\";\nimport {Loader} from \"../components/UI/Loader\";\nimport {QuizQuestions} from \"../components/activeQuiz/QuizQuestions\";\nimport {QuizFinished} from \"../components/activeQuiz/QuizFinished\";\n\ninterface ActiveQuizProps {\n    activeQuiz: ActiveQuiz | null,\n    loading: boolean\n}\n\nexport const ActiveQuizPage = ({activeQuiz, loading}: ActiveQuizProps) => {\n    const params: QuizRouterParams = useParams();\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const [isFinished, setFinished] = useState<boolean>(false);\n    const [timer, setTimer] = useState<number>(0);\n    const [activeQuestion, setActiveQuestion] = useState<number>(0);\n    const [userAnswersState, setUserAnswerState] = useState<UserQuizAnswers>({\n        answersListing: [],\n        errors: []\n    })\n\n    useEffect(() => {\n        if(params.id) {\n            dispatch(getActiveQuiz(params.id));\n        }\n        //todo no existing quiz page\n    }, []);\n\n    const onFinishHandle = () => {\n        if(activeQuiz) {\n            const emptyAnswers: number[] = [];\n            setUserAnswerState({\n                ...userAnswersState,\n                errors: emptyAnswers\n            })\n            for (let i = 0; i < activeQuiz.questionCount; i++) {\n                if(typeof userAnswersState.answersListing[i] === 'undefined') {\n                    emptyAnswers.push(i);\n                    setUserAnswerState({\n                        ...userAnswersState,\n                        errors: emptyAnswers\n                    })\n                }\n            }\n            if(emptyAnswers.length === 0) {\n                setFinished(true);\n            }\n        }\n    }\n\n    return(\n        <section className=\"active-quiz-container\">\n            {\n                loading\n                ? <Loader />\n                :   \n                    <>\n                        <div className=\"jumbotron jumbotron-fluid wrapper-bg border-neon-primary\">\n                            <div className=\"jumbotron-title\">\n                            <h1 className=\"display-4\">Quiz {activeQuiz?.title}</h1>\n                            <div className=\"buttons-jumbo-container\">\n                                {\n                                    !isFinished\n                                    ?\n                                    <>\n                                        <button\n                                            onClick={() => history.goBack()}\n                                            className=\"btn btn-outline-danger neon-hover-red btn-big\"\n                                        >Cancel</button>\n                                        <button\n                                            onClick={() => onFinishHandle()}\n                                            className=\"btn btn-outline-secondary neon-hover btn-big\"\n                                        >Finish</button>\n                                    </>\n                                    : \n                                    <button\n                                        onClick={() => history.push('/')}\n                                        className=\"btn btn-outline-secondary neon-hover btn-big\"\n                                    >Back</button>\n                                }\n                            </div>\n                        </div>\n                        </div>\n                        {\n                            !isFinished\n                            ? <QuizQuestions\n                                timer={timer}\n                                setTimer={setTimer}\n                                activeQuestion={activeQuestion}\n                                setActiveQuestion={setActiveQuestion}\n                                userAnswersState={userAnswersState}\n                                setUserAnswerState={setUserAnswerState}\n                                questionBlocks={activeQuiz?.questions}\n                            />\n                            : <QuizFinished \n                                activeQuiz={activeQuiz}\n                                timer={timer}\n                                userAnswersState={userAnswersState}\n                            />\n                        }\n                    </>\n            }\n        </section>\n    )\n};","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {tryLogIn} from '../redux/actions';\nimport {useSelector} from 'react-redux';\nimport { UserState, SummaryState } from '../interfaces';\nimport { Loader } from '../components/UI/Loader';\nimport {Redirect} from 'react-router-dom';\n\nexport const Login = () => {\n    const users: UserState = useSelector((state: SummaryState) => state.users)\n    const dispatch = useDispatch();\n\n    const [user, setUser] = useState({\n        email: '',\n        password: ''\n    });\n\n    if(users.logged) {\n        return <Redirect to='/profile' />\n    }\n\n    return (\n        <section className=\"login-container\">\n            {\n                users.loading \n                ? <Loader />\n                : <div className=\"jumbotron jumbotron-fluid wrapper-bg border-neon-primary\">\n                    <div className=\"jumbotron-title mb-3\">\n                        <h1 className=\"display-4\">Login</h1>\n                    </div>\n                    <div className=\"form-group row\">\n                        <div className=\"col-lg-6 col-12 mb-3\">\n                            <h2 className=\"neon-text-small\">Email</h2>\n                            <input\n                                type=\"text\"\n                                className=\"form-control form-control-lg\"\n                                value={user.email}\n                                onChange={(e) => setUser({\n                                    ...user,\n                                    email: e.target.value\n                                })}\n                            />\n                        </div>\n                        <div className=\"col-lg-6 col-12 mb-3\">\n                            <h2 className=\"neon-text-small\">Password</h2>\n                            <input\n                                type=\"password\"\n                                className=\"form-control form-control-lg\"\n                                value={user.password}\n                                onChange={(e) => setUser({\n                                    ...user,\n                                    password: e.target.value\n                                })}\n                            />\n                        </div>\n                    </div>\n                    <button \n                        className=\"btn btn-outline-secondary neon-hover btn-big mr-3\"\n                        onClick={() => dispatch(tryLogIn(user.email, user.password))}\n                    >Login</button>\n                    {\n                        users.error\n                        ? <span className=\"neon-text-very-small\">{users.error}</span>\n                        : null\n                    }\n                </div>\n            }\n            \n        </section>\n    )\n};","import { Dispatch } from 'redux';\nimport { ActionTypes } from './types';\nimport firebase, {FirebaseError} from 'firebase';\n\nexport interface ShowLoaderUserAction {\n    type: ActionTypes.showLoaderUser\n}\n\nexport interface HideLoaderUserAction {\n    type: ActionTypes.hideLoaderUser\n}\n\nexport interface LoginSuccessAction {\n    type: ActionTypes.loginSuccess\n}\n\nexport interface LoginErrorAction {\n    type: ActionTypes.loginError\n    payload: string\n}\n\nexport interface LogoutAction {\n    type: ActionTypes.logout\n}\n\nexport const tryLogIn = (email: string, password: string) => {\n    return async (dispatch: Dispatch) => {\n        dispatch<ShowLoaderUserAction>({\n            type: ActionTypes.showLoaderUser\n        })\n        await firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(() => {\n                dispatch<LoginSuccessAction>({\n                    type: ActionTypes.loginSuccess\n                })\n                dispatch<HideLoaderUserAction>({\n                    type: ActionTypes.hideLoaderUser\n                })\n            })\n            .catch((error: FirebaseError) => {\n                dispatch<LoginErrorAction>({\n                    type: ActionTypes.loginError,\n                    payload: error.message\n                })\n                dispatch<HideLoaderUserAction>({\n                    type: ActionTypes.hideLoaderUser\n                })\n            });\n    }\n};\n\nexport const logout = () => {\n    return (dispatch: Dispatch) => {\n        dispatch<LogoutAction>({\n            type: ActionTypes.logout\n        })\n    }\n}","import React, {useEffect} from 'react';\nimport {useDispatch} from 'react-redux'\nimport {logout} from '../redux/actions';\nimport {useHistory} from 'react-router-dom';\nimport { Loader } from '../components/UI/Loader';\n\nexport const Logout = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n        dispatch(logout());\n        history.push('/');\n    } ,[])\n\n    return <Loader />\n}","import React, {useContext} from 'react';\nimport {animated, useTransition} from \"react-spring\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport {QuizListing, Profile, QuizCreator, ActiveQuizPage, Login, Logout} from \"../pages\";\nimport {__RouterContext} from \"react-router\";\nimport {QuizesState, UserState} from \"../interfaces\";\n\ninterface RoutesProps {\n    quizes: QuizesState,\n    users: UserState\n}\n\nexport const Routes = ({quizes, users}: RoutesProps) => {\n    const {location} = useContext(__RouterContext);\n\n    const transitions = useTransition(location, location => location.pathname, {\n        from: {opacity: 0, transform: 'translate(100%,0)'},\n        enter: {opacity: 1, transform: 'translate(0,0)'},\n        leave: {opacity: 0, transform: 'translate(-50%,0)'}\n    })\n\n    return(\n        <>\n            {transitions.map(({item, props, key}) => (\n                <animated.div key = {key} style = {props}>\n                    <Switch location = {item}>\n                        <Switch>\n                            <Route path='/' exact\n                                   render={() =>\n                                       <QuizListing\n                                           quizesListing = {quizes.quizesList}\n                                           loading = {quizes.loading}\n                                       />\n                                   }\n                            />\n                            <Route path='/profile'\n                                   render={() =>\n                                       <Profile\n                                           quizesListing = {quizes.quizesList}\n                                           loading = {quizes.loading}\n                                           logged={users.logged}\n                                       />\n                                   }\n                            />\n                            <Route path='/quiz/:id'\n                                   render={() =>\n                                       <ActiveQuizPage\n                                           activeQuiz = {quizes.activeQuiz}\n                                           loading = {quizes.loading}\n                                       />\n                                   }\n                            />\n                            <Route path='/login'\n                                    render={() =>\n                                        <Login />\n                                    }\n                            />\n                            <Route path='/quiz-creator' \n                                    render={() => \n                                        <QuizCreator \n                                            logged={users.logged}\n                                        />\n                                    } />\n                            <Route path='/logout' \n                                    render={() =>\n                                        <Logout />\n                                    } \n                            />\n                            <Redirect to='/' />\n                        </Switch>\n                    </Switch>\n                </animated.div>\n            ))}\n        </>\n    )\n}","import React, {useEffect} from 'react';\nimport {Header} from \"./components/Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {QuizesState, SummaryState, UserState} from \"./interfaces\";\nimport {fetchQuizes} from \"./redux/actions\";\nimport {Modal} from \"./components/UI/Modal\";\nimport {Routes} from \"./components/Routes\";\n\nexport const App = () => {\n    const quizes: QuizesState = useSelector((state: SummaryState) => state.quizes);\n    const users: UserState = useSelector((state: SummaryState) => state.users);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchQuizes());\n    }, []);\n\n    return(\n        <>\n            <Modal\n                messages={{\n                    quiz: quizes.modal\n                }}\n            />\n            <Header />\n            <main>\n                <Routes\n                    quizes={quizes}\n                    users={users}\n                />\n            </main>\n        </>\n    )\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Action, ActionTypes} from '../actions';\nimport {UserState} from '../../interfaces'\n\nconst initialState: UserState = {\n    loading: false,\n    logged: false,\n    error: ''\n};\n\nexport const usersReducer = (state = initialState, action: Action) => {\n    switch(action.type) {\n        case ActionTypes.showLoaderUser:\n            return {\n                ...state, \n                loading: true\n            }\n        case ActionTypes.hideLoaderUser:\n            return {\n                ...state,\n                loading: false\n            }\n        case ActionTypes.loginSuccess:\n            return {\n                ...state,\n                logged: true\n            }\n        case ActionTypes.loginError:\n            return {\n                ...state,\n                error: action.payload\n            }\n        case ActionTypes.logout:\n            return {\n                ...state,\n                logged: false\n            }\n        default:\n            return state;\n    }\n}","import {Action, ActionTypes} from \"../actions\";\nimport {QuizesState} from \"../../interfaces\";\n\nconst initialState: QuizesState = {\n    loading: false,\n    modal: {},\n    quizesList: [],\n    activeQuiz: null\n};\n\nexport const quizesReducer = (state = initialState, action: Action) => {\n    switch (action.type) {\n        case ActionTypes.showModal:\n            return {\n                ...state,\n                modal: action.payload\n            }\n        case ActionTypes.hideModal:\n            return {\n                ...state,\n                modal: {}\n            }\n        case ActionTypes.showLoader:\n            return {\n                ...state,\n                loading: true\n            };\n        case ActionTypes.hideLoader:\n            return {\n                ...state,\n                loading: false\n            };\n        case ActionTypes.fetchQuizes:\n            return {\n                ...state,\n                quizesList: action.payload\n            };\n        case ActionTypes.getActiveQuiz:\n            return {\n                ...state,\n                activeQuiz: action.payload\n            };\n        default:\n            return state;\n    }\n};","import { usersReducer } from './users';\nimport {combineReducers} from \"redux\";\nimport {quizesReducer} from \"./quizes\";\nimport {SummaryState} from \"../../interfaces\";\n\nexport const reducers = combineReducers<SummaryState>({\n    quizes: quizesReducer,\n    users: usersReducer\n});","\nimport {createStore, compose, applyMiddleware, Store} from \"redux\";\nimport thunk from 'redux-thunk';\nimport {reducers} from \"./reducers\";\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store: Store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\n","import './helpFunctions/wdyr';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './scss/styles.scss';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/reduxStore\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nconst app =\n    <Router>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>\n    </Router>;\n\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}